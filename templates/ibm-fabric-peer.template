{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "This template creates two IBM Blockchain Peers in an existing VPC infrastructure.  **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.(qs-1p1j13eke) Nov,13,2018",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Software License Agreement"
					},
					"Parameters": [
						"LicenseAgreement"
					]
				},
				{
					"Label": {
						"default": "Network Configuration"
					},
					"Parameters": [
						"VPCID",
						"AvailabilityZone1",
						"SubnetID1",
						"AvailabilityZone2",
						"SubnetID2"
					]
				},
				{
					"Label": {
						"default": "Amazon EC2 Configuration"
					},
					"Parameters": [
						"InstanceType",
						"KeyPairName",
						"SecurityGroup"
					]
				},
				{
					"Label": {
						"default": "IBM Blockchain Configuration"
					},
					"Parameters": [
						"IBMBlockchainVersion",
						"StateDatabase",
						"PeerVolumeSize",
						"Peer1EnrollID",
						"Peer1EnrollSecret",
						"Peer2EnrollID",
						"Peer2EnrollSecret",
						"CAUrl",
						"CAName",
						"TLSCAName",
						"CATLSCertificateChain",
						"MspID"
					]
				},
				{
                    "Label": {
                        "default": "Docker Login"
                    },
                    "Parameters": [
                        "DockerID",
                        "DockerPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
			],
			"ParameterLabels": {
				"LicenseAgreement": {
					"default": "License agreement"
				},
				"VPCID": {
                    "default": "VPC ID"
				},
				"AvailabilityZone1": {
                    "default": "Availability Zone 1"
				},
				"SubnetID1": {
                    "default": "Subnet ID 1"
				},
				"AvailabilityZone2": {
                    "default": "Availability Zone 2"
				},
				"SubnetID2": {
                    "default": "Subnet ID 2"
				},
				"InstanceType": {
                    "default": "Instance type"
                },
                "KeyPairName": {
                    "default": "Key pair name"
				},
				"SecurityGroup": {
                    "default": "Security group"
				},
                "IBMBlockchainVersion": {
                    "default": "IBM Blockchain version"
                },
                "StateDatabase": {
                    "default": "Type of state database"
                },
                "PeerVolumeSize": {
                    "default": "Peer volume size"
                },
                "Peer1EnrollID": {
                    "default": "Peer 1 enroll ID"
                },
                "Peer1EnrollSecret": {
                    "default": "Peer 1 enroll secret"
                },
                "Peer2EnrollID": {
                    "default": "Peer 2 enroll ID"
                },
                "Peer2EnrollSecret": {
                    "default": "Peer 2 enroll secret"
                },
                "CAUrl": {
                    "default": "Certificate Authority (CA) URL"
                },
                "CAName": {
                    "default": "Enrollment Certificate Authority (CA) Name"
				},
				"TLSCAName": {
                    "default": "TLS Certificate Authority (CA) Name"
                },
                "CATLSCertificateChain": {
                    "default": "Certificate Authority (CA) TLS Certificate Chain"
                },
                "MspID": {
                    "default": "Organization MSP"
				},
				"DockerID": {
                    "default": "Docker ID"
                },
                "DockerPassword": {
                    "default": "Password"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 bucket name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 key prefix"
                }
			}
		}
	},
	"Parameters": {
		"LicenseAgreement": {
			"Description": "I have read and agree to the license terms for IBM Blockchain Platform (http://ibm.biz/BdY3AY).",
			"Type": "String",
			"AllowedValues": [
				"I agree",
				"-"
			],
			"Default": "-",
			"ConstraintDescription": "must answer 'I agree'"
		},
		"VPCID": {
			"Description": "ID of your existing VPC for deployment.",
			"Type": "AWS::EC2::VPC::Id"
		},
		"AvailabilityZone1": {
			"Description": "The Availability Zone in which to deploy the first peer node.",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"SubnetID1": {
			"Description": "ID of the subnet to use for the first peer node.",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"AvailabilityZone2": {
			"Description": "The Availability Zone in which to deploy the second peer node.",
			"Type": "AWS::EC2::AvailabilityZone::Name"
		},
		"SubnetID2": {
			"Description": "ID of the subnet to use for the second peer node.",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"KeyPairName": {
			"Description": "Name of an existing EC2 key pair within the AWS region.",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"SecurityGroup": {
			"Description": "ID of an existing EC2 security group within the AWS region; should allow ingress on ports 22, 7051 and optionally 7053.",
			"Type": "AWS::EC2::SecurityGroup::Id"
		},
		"InstanceType": {
			"AllowedValues": [
				"t2.medium",
				"t2.large",
				"t2.xlarge",
				"t2.2xlarge",
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge",
				"m4.10xlarge",
				"m4.16xlarge",
				"m5.large",
				"m5.xlarge",
				"m5.2xlarge",
				"m5.4xlarge",
				"m5.12xlarge",
				"m5.24xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"c5.large",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge",
				"x1.16xlarge",
				"x1.xlarge",
				"x1e.xlarge",
				"x1e.2xlarge",
				"x1e.4xlarge",
				"x1e.8xlarge",
				"x1e.16xlarge",
				"x1e.32xlarge",
				"i3.large",
				"i3.xlarge",
				"i3.2xlarge",
				"i3.4xlarge",
				"i3.8xlarge",
				"i3.16xlarge",
				"i3.metal"
			],
			"ConstraintDescription": "Must contain valid instance type",
			"Default": "m4.xlarge",
			"Description": "Type of EC2 instance for the Workload instances",
			"Type": "String"
		},
		"PeerVolumeSize": {
			"Type": "Number",
			"Description": "Size of the EBS Volume Size used to store persistent data (ledger, state database, MSP) for the peer in GBs.",
			"Default": 100
		},
		"IBMBlockchainVersion": {
			"Description": "IBM Blockchain version to deploy.",
			"Type": "String",
			"AllowedValues": [
				"1.4.2"
			],
			"Default": "1.4.2"
		},
		"CAUrl": {
			"Description": "The url for the Fabric Certificate Authority to use for enrolling the peer.",
			"Type": "String",
			"AllowedPattern": "^(https:\/\/)[a-zA-Z0-9-\/.]+((:[0-9]+))?(\/.*\/?)?",
			"ConstraintDescription": "This URL must be a valid https URL"
		},
		"CAName": {
            "Description": "The name of the Fabric Certificate Authority to use for enrolling the peer.",
            "Type": "String",
            "AllowedPattern": ".+",
            "Default": "ca"
        },
        "TLSCAName": {
            "Description": "The name of the Fabric Certificate Authority used to obtain the TLS certificate for the peer.",
            "Type": "String",
            "AllowedPattern": ".+",
            "Default": "tlsca"
        },
		"CATLSCertificateChain": {
			"Description": "PEM-encoded certificate chain which issued the TLS certificate for the Fabric Certificate Authority.",
			"Type": "String"
		},
		"MspID": {
			"Description": "The MSP identifier for the organization to which this peer belongs.",
			"Type": "String",
			"AllowedPattern": ".+"
		},
		"Peer1EnrollID": {
			"Description": "The registered ID the first peer will use to enroll.",
			"Type": "String",
			"AllowedPattern": ".+"
		},
		"Peer1EnrollSecret": {
			"Description": "The secret the first peer will use to enroll.",
			"Type": "String",
			"NoEcho": true,
			"AllowedPattern": ".+"
		},
		"Peer2EnrollID": {
			"Description": "The registered ID the second peer will use to enroll.",
			"Type": "String",
			"AllowedPattern": ".+"
		},
		"Peer2EnrollSecret": {
			"Description": "The secret the second peer will use to enroll.",
			"Type": "String",
			"NoEcho": true,
			"AllowedPattern": ".+"
		},
		"StateDatabase": {
			"Description": "The type of database to use for storing blockchain state.  This selection should match the State Database type used by the rest of the network.",
			"Type": "String",
			"AllowedValues": [
				"goleveldb",
				"CouchDB"
			],
			"Default": "CouchDB"
		},
		"DockerID": {
            "Description": "The Docker ID used to pull images from Docker Hub.",
            "Type": "String",
            "AllowedPattern": ".+"
        },
        "DockerPassword": {
            "Description": "The password associated with Docker ID.",
            "Type": "String",
            "NoEcho": true,
            "AllowedPattern": ".+"
        },
		"QSS3BucketName": {
			"AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
			"ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
			"Default": "ibmblockchain",
			"Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
			"Type": "String"
		},
		"QSS3KeyPrefix": {
			"AllowedPattern": "^[0-9a-zA-Z-/]*$",
			"ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
			"Default": "quickstart-ibm-fabric/",
			"Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
			"Type": "String"
		}
	},
	"Resources": {
		"Peer1Stack": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/ibm-fabric-peer-node.template"
				},
				"Parameters": {
					"LicenseAgreement": {
						"Ref": "LicenseAgreement"
					},
					"QSS3BucketName": {
						"Ref": "QSS3BucketName"
					},
					"VPCID": {
						"Ref": "VPCID"
					},
					"InstanceType": {
						"Ref": "InstanceType"
					},
					"PeerVolumeSize": {
						"Ref": "PeerVolumeSize"
					},
					"KeyPairName": {
						"Ref": "KeyPairName"
					},
					"SecurityGroup": {
						"Ref": "SecurityGroup"
					},
					"SubnetID": {
						"Ref": "SubnetID1"
					},
					"AvailabilityZone": {
						"Ref": "AvailabilityZone1"
					},
					"IBMBlockchainVersion": {
						"Ref": "IBMBlockchainVersion"
					},
					"CAUrl": {
						"Ref": "CAUrl"
					},
					"CAName": {
						"Ref": "CAName"
					},
					"TLSCAName": {
						"Ref": "TLSCAName"
					},
					"CATLSCertificateChain": {
						"Ref": "CATLSCertificateChain"
					},
					"MspID": {
						"Ref": "MspID"
					},
					"EnrollID": {
						"Ref": "Peer1EnrollID"
					},
					"EnrollSecret": {
						"Ref": "Peer1EnrollSecret"
					},
					"StateDatabase": {
						"Ref": "StateDatabase"
					},
                    "DockerID": {
                        "Ref": "DockerID"
                    },
                    "DockerPassword": {
                        "Ref": "DockerPassword"
                    }
				}
			}
		},
		"Peer2Stack": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": {
					"Fn::Sub": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/ibm-fabric-peer-node.template"
				},
				"Parameters": {
					"LicenseAgreement": {
						"Ref": "LicenseAgreement"
					},
					"QSS3BucketName": {
						"Ref": "QSS3BucketName"
					},
					"VPCID": {
						"Ref": "VPCID"
					},
					"InstanceType": {
						"Ref": "InstanceType"
					},
					"PeerVolumeSize": {
						"Ref": "PeerVolumeSize"
					},
					"KeyPairName": {
						"Ref": "KeyPairName"
					},
					"SecurityGroup": {
						"Ref": "SecurityGroup"
					},
					"SubnetID": {
						"Ref": "SubnetID2"
					},
					"AvailabilityZone": {
						"Ref": "AvailabilityZone2"
					},
					"IBMBlockchainVersion": {
						"Ref": "IBMBlockchainVersion"
					},
					"CAUrl": {
						"Ref": "CAUrl"
					},
					"CAName": {
						"Ref": "CAName"
					},
					"TLSCAName": {
						"Ref": "TLSCAName"
					},
					"CATLSCertificateChain": {
						"Ref": "CATLSCertificateChain"
					},
					"MspID": {
						"Ref": "MspID"
					},
					"EnrollID": {
						"Ref": "Peer2EnrollID"
					},
					"EnrollSecret": {
						"Ref": "Peer2EnrollSecret"
					},
					"StateDatabase": {
						"Ref": "StateDatabase"
					},
                    "DockerID": {
                        "Ref": "DockerID"
                    },
                    "DockerPassword": {
                        "Ref": "DockerPassword"
                    }
				}
			}
		}
	},
	"Outputs": {
		"Peer1ExternalEndpoint": {
			"Description": "The public endpoint for the first peer.",
			"Value": {
				"Fn::GetAtt": [
					"Peer1Stack",
					"Outputs.ExternalEndpoint"
				]
			}
		},
		"Peer1InternalEndpoint": {
			"Description": "The private endpoint for the first peer.",
			"Value": {
				"Fn::GetAtt": [
					"Peer1Stack",
					"Outputs.InternalEndpoint"
				]
			}
		},
		"Peer1PublicDnsName": {
            "Description": "The public hostname for the first peer instance.",
            "Value": {
                "Fn::GetAtt": [
                    "Peer1Stack",
                    "Outputs.PublicDnsName"
                ]
            }
        },
        "Peer1PrivateDnsName": {
            "Description": "The private hostname for the first peer instance.",
            "Value": {
                "Fn::GetAtt": [
                    "Peer1Stack",
                    "Outputs.PrivateDnsName"
                ]
            }
		},
		"Peer1TLSRootCertificate": {
            "Description": "The SCP URI for copying the root certificate which issued the TLS certificate for the first peer.",
            "Value": {
                "Fn::GetAtt": [
                    "Peer1Stack",
                    "Outputs.TLSRootCertificate"
                ]
            }
        },
		"Peer2ExternalEndpoint": {
			"Description": "The public endpoint for the second peer.",
			"Value": {
				"Fn::GetAtt": [
					"Peer2Stack",
					"Outputs.ExternalEndpoint"
				]
			}
		},
		"Peer2InternalEndpoint": {
			"Description": "The private endpoint for the second peer.",
			"Value": {
				"Fn::GetAtt": [
					"Peer2Stack",
					"Outputs.InternalEndpoint"
				]
			}
		},
		"Peer2PublicDnsName": {
            "Description": "The public hostname for the second peer instance.",
            "Value": {
                "Fn::GetAtt": [
                    "Peer2Stack",
                    "Outputs.PublicDnsName"
                ]
            }
        },
        "Peer2PrivateDnsName": {
            "Description": "The private hostname for the second peer instance.",
            "Value": {
                "Fn::GetAtt": [
                    "Peer2Stack",
                    "Outputs.PrivateDnsName"
                ]
            }
        },
		"Peer2TLSRootCertificate": {
            "Description": "The SCP URI for copying the root certificate which issued the TLS certificate for the second peer.",
            "Value": {
                "Fn::GetAtt": [
                    "Peer2Stack",
                    "Outputs.TLSRootCertificate"
                ]
            }
        }
	}
}
